{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"19-5VVsGjYuWlUYTvrLHxqKDD2eOqtzTH","timestamp":1732247391878},{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1731995359302}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"code","source":["Первушин Юрий Александрович"],"metadata":{"id":"CZfxUjS__s9v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","  def __init__(self, width, height):\n","    self.height = height\n","    self.width = width\n","  def square(self):\n","    return self.width * self.height\n","  def perimetr(self):\n","    return self.width * 2 + self.height*2\n","\n","a = Rectangle(12, 2)\n","print('Площадь: ', a.square())\n","print('Периметр: ', a.perimetr())\n","print('Высота и Ширина: ', a.height,' и ',a.width)"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732249211446,"user_tz":-300,"elapsed":411,"user":{"displayName":"Юрий Первушин","userId":"12726534025094209911"}},"outputId":"3c163593-75bb-4655-df32-4d44a4d376b8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Площадь:  24\n","Периметр:  28\n","Высота и Ширина:  2  и  12\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccountco:\n","  def __init__(self, account_holder, balance):\n","    self.account_holder = account_holder\n","    self.balance = 0\n","  def deposit(self, amount):\n","    self.balance += amount\n","  def withdraw(self, amount):\n","    if self.balance > amount:\n","      self.balance -= amount\n","    else:\n","      print('Ошибка. Недостаточно средств')\n","  def get_balance(self):\n","    print(self.balance)\n","\n","a = BankAccountco('Smith', 100)\n","print(a.account_holder, a.balance)\n","a.deposit(1000)\n","a.get_balance()\n","a.withdraw (800)\n","a.get_balance()"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732250343983,"user_tz":-300,"elapsed":433,"user":{"displayName":"Юрий Первушин","userId":"12726534025094209911"}},"outputId":"a130d93c-7c87-4da3-f400-81aef903f8f6"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Smith 0\n","1000\n","200\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":[],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","  def __init__(self, title, author, is_borrowed):\n","    self.title = title\n","    self.author = author\n","    self.is_borrowed = False\n","\n","class Library:\n","  def __init__(self):\n","    self.spisok = []\n","  def add_book(self, book: Book):\n","    self.spisok.append(book)\n","a = Book('Монополия', 'Вилков', False)\n","b = Library()\n","b.add_book(a)\n","print(b.spisok)"],"metadata":{"id":"GKKmdfN8GL6f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732253227370,"user_tz":-300,"elapsed":422,"user":{"displayName":"Юрий Первушин","userId":"12726534025094209911"}},"outputId":"8d62ced5-49cb-47d2-a0f5-25458b0a2a3a"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["[<__main__.Book object at 0x7c5068d9a740>]\n"]}]}]}